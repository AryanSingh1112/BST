void inorder(TreeNode* root , vector<int>& val){
    if(root == NULL) return;

    inorder(root->left , val);
    val.push_back(root->data);
    inorder(root->right , val);
}

vector<int> mergearray(vector<int> a , vector<int> b){
    vector<int> ans;
    int i = 0, j = 0;

    while(i < a.size() && j < b.size()){
        if(a[i] < b[j]){
            ans.push_back(a[i++]);
        }
        else if(a[i] > b[j]){
            ans.push_back(b[j++]);
        }
        else {
            ans.push_back(a[i]);
            ans.push_back(b[j]);
            i++;
            j++;
        }
    }

    while(i < a.size()) ans.push_back(a[i++]);
    while(j < b.size()) ans.push_back(b[j++]);

    return ans;
}

vector<int> mergeBST(TreeNode *root1, TreeNode *root2)
{
    vector<int> bst1, bst2;
    inorder(root1, bst1);
    inorder(root2, bst2);

    return mergearray(bst1, bst2);
}















OPTIMIZED FORM:



// class TreeNode {
// public:
//     int data;
//     TreeNode *left, *right;
//     TreeNode() : data(0), left(NULL), right(NULL) {}
//     TreeNode(int x) : data(x), left(NULL), right(NULL) {}
//     TreeNode(int x, TreeNode *left, TreeNode *right) : data(x), left(left), right(right) {}
// };

// Convert BST to Sorted DLL (reverse inorder traversal)
void convertToDLL(TreeNode* root, TreeNode*& head) {
    if (root == NULL) return;

    convertToDLL(root->right, head);

    root->right = head;
    if (head != NULL)
        head->left = root;

    head = root;

    convertToDLL(root->left, head);
}

// Merge two sorted DLLs
TreeNode* mergeDLLs(TreeNode* head1, TreeNode* head2) {
    TreeNode* head = NULL;
    TreeNode* tail = NULL;

    while (head1 && head2) {
        TreeNode* temp = nullptr;
        if (head1->data < head2->data) {
            temp = head1;
            head1 = head1->right;
        } else {
            temp = head2;
            head2 = head2->right;
        }

        temp->left = temp->right = NULL;

        if (!head) {
            head = tail = temp;
        } else {
            tail->right = temp;
            temp->left = tail;
            tail = temp;
        }
    }

    while (head1) {
        TreeNode* temp = head1;
        head1 = head1->right;
        temp->left = temp->right = NULL;
        tail->right = temp;
        temp->left = tail;
        tail = temp;
    }

    while (head2) {
        TreeNode* temp = head2;
        head2 = head2->right;
        temp->left = temp->right = NULL;
        tail->right = temp;
        temp->left = tail;
        tail = temp;
    }

    return head;
}

// Traverse the merged DLL and return data as vector<int>
vector<int> dllToVector(TreeNode* head) {
    vector<int> result;
    while (head) {
        result.push_back(head->data);
        head = head->right;
    }
    return result;
}

vector<int> mergeBST(TreeNode* root1, TreeNode* root2) {
    TreeNode* head1 = NULL;
    TreeNode* head2 = NULL;

    convertToDLL(root1, head1);
    convertToDLL(root2, head2);

    TreeNode* mergedDLL = mergeDLLs(head1, head2);

    return dllToVector(mergedDLL);
}

